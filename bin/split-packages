#!/usr/bin/env python

from argparse import ArgumentParser
from gittle import Gittle
from colorama import init, Fore

import os, sys, shutil, time

parser = ArgumentParser(description='Split the project into multiple packages and push to git.')
parser.add_argument('-p', '--push', dest='push', help='Commit and push changes to the repository.', action='store_true')
parser.add_argument('-u', '--pull', dest='pull', help='Update the repository if it already exists.', action='store_true')
parser.add_argument('-t', '--tag', dest='tag', default='', help='Tag the commit.')

args = parser.parse_args()
init()

# Set directories
TARGET_DIR = '/home/vagrant/packages/'
SOURCE_DIR = '/vagrant/src/Titon/'

# Define class
class PackageSplitter:
    def config_name(self, name):
        """
        Return the valid configuration name for the package.
        """

        if name == 'Environment':
            return 'env'
        else:
            return name.lower()

    def repo_url(self, name):
        """
        Return the SSH URL for the git repository.
        """

        return 'git@github.com:titon/{0}.git'.format(name)

    def init_git(self, name, dst):
        """
        Either clone or update the git repository at the destination.
        """

        repoUrl = self.repo_url(name)

        if not os.path.exists(dst):
            print '\tCloning git repository'

            if Gittle.clone(repoUrl, dst):
                print '\tCloned to ' + dst
            else:
                print Fore.RED + '\tFailed to clone repository' + Fore.RESET
                sys.exit()

        elif args.pull:
            print '\tUpdating git repository'

            repo = Gittle(dst, origin_uri=repoUrl)
            repo.pull()

    def copy_license(self, dst):
        """
        Copy the license from the root to the destination.
        """

        print '\tCopying license'

        shutil.copy('/vagrant/license.md', dst)

    def copy_source(self, src, dst):
        """
        Recursively copy the source files to the destination.
        """

        print '\tCopying source folder ' + src.replace('/vagrant/src/Titon/', '').strip('/')

        if not os.path.exists(dst):
            os.makedirs(dst)

        for file in os.listdir(src):
            if os.path.isdir(src + file):
                self.copy_source(src + file + '/', dst + file + '/')
            else:
                shutil.copy(src + file, dst + file)

    def split_packages(self):
        """
        Split the project into packages.
        """

        print Fore.GREEN + 'Splitting packages...'

        for packageName in os.listdir(SOURCE_DIR):
            if packageName == 'Test':
                continue

            packageDir = SOURCE_DIR + packageName + '/'
            configName = self.config_name(packageName)
            repoDir = TARGET_DIR + configName + '/'

            print Fore.YELLOW + '\n' + packageName + Fore.RESET

            # Clone or update the repo
            self.init_git(configName, repoDir)

            # Copy license
            self.copy_license(repoDir + 'license.md')

            # Copy the source folder
            self.copy_source(packageDir, repoDir)

    def push_packages(self):
        """
        Push all changes to the git repositories.
        """

        if not args.push:
            return

        print Fore.GREEN + '\nPushing packages...'

        for repoName in os.listdir(TARGET_DIR):
            repoDir = TARGET_DIR + repoName + '/'

            print Fore.YELLOW + '\n' + repoName.capitalize() + Fore.RESET

            repo = Gittle(repoDir, origin_uri=self.repo_url(repoName))

            # Add new files
            added = len(repo.added_files)

            if added > 0:
                print '\tAdding {0} files'.format(added)

                repo.stage(repo.added_files)

            # Add untracked files
            untracked = len(repo.untracked_files)

            if untracked > 0:
                print '\tAdding {0} untracked files'.format(untracked)

                repo.stage(repo.untracked_files)

            # Update modified files
            modified = len(repo.modified_files)

            if modified > 0:
                print '\tUpdating {0} files'.format(modified)

                repo.stage(repo.modified_files)

            # Remove files
            removed = len(repo.removed_files)

            if removed > 0:
                print '\tRemoving {0} files'.format(removed)

                repo.stage(repo.removed_files)

            # Commit the changes
            if len(repo.tracked_files) > 0:
                print '\tPushing changes'

                if args.tag:
                    repo.commit(message=args.tag)
                    repo.create_tag(args.tag, "master")
                else:
                    repo.commit(message='Automated package split - ' + time.strftime("%Y/%m/%d"))

                repo.push()

# Run process
packager = PackageSplitter()
packager.split_packages()
packager.push_packages()
